//Get CPU % for last 4 hours
Perf
| where Computer == "ContosoWeb1.ContosoRetail.com" and CounterName == "% Processor Time"
| where TimeGenerated >= ago(4hour)

//fFind noisy process, create time-series segmented by InstanceName
Perf
| where Computer == "ContosoWeb1.ContosoRetail.com" and CounterName == "% Processor Time" and ObjectName == "Process"
| make-series avg(CounterValue) default=0 on TimeGenerated in range(ago(4hour), now(), 10m) by InstanceName

//time-chart to easily identify the spiking process
Perf
| where Computer == "ContosoWeb1.ContosoRetail.com" and CounterName == "% Processor Time" and ObjectName == "Process" and InstanceName !in ("_Total", "Idle")
| make-series avg(CounterValue) default=0 on TimeGenerated in range(ago(4hour), now(), 10m) by InstanceName
| render timechart 

//Since IIS (w3wp) is serving multiple apps from the VM, we could also drill into IIS Logs and plot a chart to monitor the response times against our SLA of 99%ile under 10 seconds.
W3CIISLog
| where TimeGenerated >= ago(2d)
| summarize SLABreached=count(TimeTaken >10000), SLAMet=count(TimeTaken < 10000), totalCount=count()   by bin(TimeGenerated, 15m)
| extend pctSLAIndex = SLAMet * 100.0/totalCount 
| extend SLA = 99
| project TimeGenerated, pctSLAIndex , SLA 
| render timechart 

// Courtesy of A. Taranenko
let AppThreshold = 30;
let CPUThreshold = 50;
// First, I search computers loaded more than 50% of CPU. 
let HiLoadComp = (Perf
| where ObjectName == "Processor" and CounterName == "% Processor Time" and InstanceName == "_Total" 
| where CounterValue > CPUThreshold
| distinct Computer);
//Second, I search all applications, that generated hi-CPU, more 30% of one of the CPU cores. I also group family instances (like Chrome#1, Chrome#2, Excel#1, Excel#2) to one group name (like Chrome, Excel etc). Also, I select only those applications that generate more than 30% of 1 core CPU load in 30 minutes
let HiLoadApp = (Perf
| where ObjectName == "Process" and CounterName == "% Processor Time" 
| where InstanceName <> "_Total" and InstanceName <> "Idle"
| extend GroupName = tolower(trim_end(@"#[\d]*",InstanceName))  
| summarize percentile(CounterValue, 95) by GroupName, bin(TimeGenerated, 30m)
| where percentile_CounterValue_95 >  AppThreshold
| distinct GroupName);
// Third, I try to collect all this stuff in one and have a list of apps that most generated CPU by computers
Perf
| where ObjectName == "Process" and CounterName == "% Processor Time" 
| where InstanceName <> "_Total" and InstanceName <> "Idle" 
| where Computer in (HiLoadComp)
| extend GroupName = tolower(trim_end(@"#[\d]*",InstanceName)) 
| where GroupName in (HiLoadApp) 
| summarize PCT95CPUPercentTime = percentile(CounterValue, 95)  by Computer, GroupName
| render timechart 


//Part 1 - per VM, show me latest known state of various perf metrics
let CPUQuery = (){
    Perf
    | where ObjectName == "Processor"
    | where CounterName == "% Processor Time"
    | where InstanceName == "_Total"
    | summarize avg(CounterValue) by Computer, CounterName, InstanceName
};
let MemQuery = (){
    Perf
    | where ObjectName == "Memory"
    | where CounterName == "Available MBytes"
    | summarize avg(CounterValue) by Computer, CounterName, InstanceName
    | extend CounterName = "Memory", InstanceName = "AvailableMBytes"
};
let DiskQuery = (){
    Perf
    | where ObjectName == "LogicalDisk"
    | where CounterName == "% Free Space"
    | where InstanceName == "_Total"
    | summarize avg(CounterValue) by Computer, CounterName, InstanceName
};
let ProcessQuery = (){
    Perf
    | where CounterName == "% Processor Time"
    | where ObjectName == "Process"
    | where InstanceName !in ("_Total", "Idle")
    | top-nested of Computer by tmp=max(1), top-nested 5 of InstanceName by avg(CounterValue) 
    | summarize sum(aggregated_InstanceName) by Computer
    | project Computer, CounterName = "% Processor Time", InstanceName = "Top5Processes", avg_CounterValue = sum_aggregated_InstanceName
};
union CPUQuery, MemQuery, DiskQuery, ProcessQuery
| project Computer, Counter = strcat(CounterName, " - ", InstanceName), avg_CounterValue
| evaluate pivot(Counter, avg(avg_CounterValue), Computer)


// Part 2 - same as above, dive deeper!
let timeRange = 30m; //Time range to look back on
let grain = 1m;      //Resolution of the result set
let CPUQuery = (){
    Perf
    | where TimeGenerated > ago(timeRange)
    | where ObjectName == "Processor"
    | where CounterName == "% Processor Time"
    | where InstanceName == "_Total"
    | summarize avg(CounterValue) by Computer, CounterName, InstanceName, bin(TimeGenerated, grain)
    | project TimeGenerated, Computer, CounterValue = avg_CounterValue, CounterName
};
let ProcessQuery = (){
    Perf
    | where TimeGenerated > ago(timeRange)
    | where CounterName == "% Processor Time"
    | where ObjectName == "Process"
    | where InstanceName !in ("_Total", "Idle")
    | summarize avg(CounterValue) by Computer, InstanceName, bin(TimeGenerated, grain)
    | top-nested of Computer by tmp=max(1), top-nested of TimeGenerated by tmp2=max(1), top-nested 5 of InstanceName by avg(avg_CounterValue) //generate table of top 5 processes by average CPU time for every computer and every time period 
    | order by Computer asc, TimeGenerated asc, aggregated_InstanceName desc
    | extend rn = row_number(1, (Computer != prev(Computer)) or (TimeGenerated != prev(TimeGenerated)) ) //use row number to determine the process' ordinality
    | extend Process1_name = iif(rn == 1, InstanceName, ""), Process1_value = iif(rn == 1, aggregated_InstanceName, double(null)), Process2_name = iif(rn == 2, InstanceName, ""), Process2_value = iif(rn == 2, aggregated_InstanceName, double(null)), Process3_name = iif(rn == 3, InstanceName, ""), Process3_value = iif(rn == 3, aggregated_InstanceName, double(null)), Process4_name = iif(rn == 4, InstanceName, ""), Process4_value = iif(rn == 4, aggregated_InstanceName, double(null)), Process5_name = iif(rn == 5, InstanceName, ""), Process5_value = iif(rn == 5, aggregated_InstanceName, double(null)) //unpivot processes into distinct ordinally-assigned columns
    | summarize (Process1_name, Process1_value)=any(Process1_name, Process1_value), (Process2_name, Process2_value)=any(Process2_name, Process2_value), (Process3_name, Process3_value)=any(Process3_name, Process3_value), (Process4_name, Process4_value)=any(Process4_name, Process4_value), (Process5_name, Process5_value)=any(Process5_name, Process5_value) by Computer, bin(TimeGenerated, grain) //unify processes for same computer and time range onto same row
};
let MemQuery = (){
    Perf
    | where TimeGenerated > ago(timeRange)
    | where ObjectName == "Memory"
    | where CounterName == "Available MBytes"
    | summarize avg(CounterValue) by Computer, CounterName, bin(TimeGenerated, grain)
    | extend CounterName = "Memory"
    | project-rename CounterValue=avg_CounterValue 
};
let DiskQuery = (){
    Perf
    | where TimeGenerated > ago(timeRange)
    | where ObjectName == "LogicalDisk"
    | where CounterName == "% Free Space"
    | where InstanceName == "_Total"
    | summarize avg(CounterValue) by Computer, CounterName, bin(TimeGenerated, grain)
    | extend CounterName = "% Free Space"
    | project-rename CounterValue=avg_CounterValue 
};
range TimeGenerated from bin(ago(timeRange)-1s, grain) to now() step grain //generate entire time series so that we don't lose any time periods where data was not reported
| join kind=leftouter hint.strategy=shuffle (CPUQuery) on TimeGenerated
| join kind=leftouter hint.strategy=shuffle (ProcessQuery) on TimeGenerated, Computer
| project-away Computer1, TimeGenerated1, TimeGenerated2
| union MemQuery
| union DiskQuery
| where isnotempty(Computer)
| order by Computer asc, TimeGenerated asc